filter(game_year == input$year,
Name == input$name,
pitch_type == input$type)
})
#Reactor for input: year
years <- reactive({
year <- subset(sc4, game_year == input$year)
year <- select(year, "Name")
})
observe({
updateSelectizeInput(session, "name", choices = years())
})
#Reactor for input: name
names <- reactive({
sc4 %>% dplyr::filter(Name == input$name) %>%
select(pitch_type)
})
observe({
updateSelectizeInput(session, "type", choices = names())
})
#Table
output$table <- renderTable({
#Use data from baseball savant
sc_reactive() %>% select(WAR, p_win, p_loss, pitch_count, p_era, in_zone_percent, frac_junk, whiff_percent, p_k_percent, p_bb_percent, fastball_avg_speed, offspeed_avg_speed) %>% head(1)
})
#Plot 1: Hit Percentage by Location
output$plot1 <- renderGirafe({
pitcher_map <- hit_likely(sc_reactive())
g <- pitcher_map + theme_void() + coord_fixed() +
ggtitle(paste(input$name, "Hit Percentage by Location for", input$type, "in ", input$year))
girafe(ggobj = g)
})
#Plot 2: Pitch Location Frequency
output$plot2 <- renderGirafe({
frequency_map <- pitch_freq(sc_reactive2())
g <- frequency_map + theme_void() + coord_fixed() +
labs(title = paste(input$name, "Pitch Location Frequency for ", input$type, "in ", input$year))
girafe(ggobj = g)
})
}
# Run the application
shinyApp(ui = ui, server = server)
Chapman_1 <- hit_likely(Chapman_data) + labs(title = "Ohtani SL Hit Percentage")
Chapman_2 <- pitch_freq(Chapman_data2) + labs(title = "Ohtani SL Pitch Frequency")
Rogers_1 <- hit_likely(Rogers_data) + labs(title = "Mitch Keller SL Hit Percentage")
Rogers_2 <- pitch_freq(Rogers_data2) + labs(title = "Mitch Keller SL Pitch Frequency")
ggarrange(Chapman_1, Chapman_2, Rogers_1, Rogers_2, ncol = 2)
ggarrange(Chapman_1, Chapman_2, Rogers_1, Rogers_2, ncol = 2)
Chapman_1 <- hit_likely(Chapman_data) + labs(title = "Aroldis Chapman FF Hit Percentage")
Chapman_2 <- pitch_freq(Chapman_data2) + labs(title = "Aroldis Chapman FF Pitch Frequency")
Rogers_1 <- hit_likely(Rogers_data) + labs(title = "Tyler Rogers FF Hit Percentage")
Rogers_2 <- pitch_freq(Rogers_data2) + labs(title = "Tyler Rogers FF Pitch Frequency")
ggarrange(Chapman_1, Chapman_2, Rogers_1, Rogers_2, ncol = 2)
library(ggpubr)
Ohtani_1 <- hit_likely(Ohtani_data) + labs(title = "Shohei Ohtani SL Hit Percentage")
Ohtani_2 <- pitch_freq(Ohtani_data2) + labs(title = "Shohei Ohtani SL Pitch Frequency")
Keller_1 <- hit_likely(Keller_data) + labs(title = "Mitch Keller SL Hit Percentage")
Keller_2 <- pitch_freq(Keller_data2) + labs(title = "Mitch Keller SL Pitch Frequency")
ggarrange(Ohtani_1, Ohtani_2, Keller_1, Keller_2, ncol = 2)
Chapman_1 <- hit_likely(Chapman_data) + labs(title = "Aroldis Chapman FF Hit Percentage")
Chapman_2 <- pitch_freq(Chapman_data2) + labs(title = "Aroldis Chapman FF Pitch Frequency")
Rogers_1 <- hit_likely(Rogers_data) + labs(title = "Tyler Rogers FF Hit Percentage")
Rogers_2 <- pitch_freq(Rogers_data2) + labs(title = "Tyler Rogers FF Pitch Frequency")
ggarrange(Chapman_1, Chapman_2, Rogers_1, Rogers_2, ncol = 2)
#Nola vs Corbin
Nola_1 <- hit_likely(Nola_data) + labs(title = "Aaron Nola FF Hit Percentage")
Nola_2 <- pitch_freq(Nola_data2) + labs(title = "Aaron Nola FF Pitch Frequency")
Corbin_1 <- hit_likely(Corbin_data) + labs(title = "Patrick Corbin FF Hit Percentage")
Corbin_2 <- pitch_freq(Corbin_data2) + labs(title = "Patrick Corbin FF Pitch Frequency")
ggarrange(Nola_1, Nola_2, Corbin_1, Corbin_2, ncol = 2)
#Nola vs deGrom (lefty)
Nola_1 <- hit_likely(Nola_data) + labs(title = "Aaron Nola FF Hit Percentage")
Nola_2 <- pitch_freq(Nola_data2) + labs(title = "Aaron Nola FF Pitch Frequency")
deGrom_1 <- hit_likely(deGrom_data) + labs(title = "Jacob deGrom FF Hit Percentage")
deGrom_2 <- pitch_freq(deGrom_data2) + labs(title = "Jacob deGrom FF Pitch Frequency")
ggarrange(Nola_1, Nola_2, deGrom_1, deGrom_2, ncol = 2)
names(sc)
names(cs2)
names(sc2)
View(sc4)
unique(sc$pitch_type)
data_offspeed <- sc %>%
filter(!(is.na(pitch_type))) %>%
mutate(offspeed = ifelse(pitch_type %in% c("SI", "SL", "CH", "CU", "KC", "KN", "EP", "SC", "CS"), 1, 0)) %>%
group_by(pitcher, game_year) %>%
dplyr::summarise(total_pitches = n(),
offspeed_total = sum(offspeed),
frac_offspeed = offspeed_total / total_pitches)
sc1 <- inner_join(sc, data_offspeed, by = c("pitcher", "game_year"))
sc2 <- inner_join(sc1, p_data2, by = c("pitcher", "game_year")) %>%
filter(pitch_type != "")
sc2 <- inner_join(sc1, p_data2, by = c("pitcher", "game_year")) %>%
filter(pitch_type != "")
sc4 <- sc2 %>%
filter(!is.na(plate_x),
!is.na(plate_z),
type == "X" | events %in% c("strikeout", "strikeout_double_play")) %>%
arrange(game_year, Name, pitch_type)
sc5 <- sc2 %>%
filter(!is.na(plate_x),
!is.na(plate_z))
top_strike_zone <- 3.6
bottom_strike_zone <- 1.5
inside_strike_zone <- -0.95
outside_strike_zone <- 0.95
#Build Strike Zone Border
strike_zone <- data.frame(
x=c(inside_strike_zone, inside_strike_zone, outside_strike_zone, outside_strike_zone, inside_strike_zone),
y=c(bottom_strike_zone, top_strike_zone, top_strike_zone, bottom_strike_zone, bottom_strike_zone)
)
hit_likely <- function(data) {
data <- data %>%
mutate(Hit = ifelse(events %in% c("single", "double", "triple", "home_run"), 1, 0))
# implement the GAM fit (logistic link)
fit <- gam(Hit ~ s(plate_x, plate_z), family = binomial, data = data)
# find predicted probabilities over a 50 x 50 grid
x <- seq(-1.5, 1.5, length.out=50)
y <- seq(0.5, 5, length.out=50)
data.predict <- data.frame(plate_x = c(outer(x, y * 0 + 1)),
plate_z = c(outer(x * 0 + 1, y)))
predicted_data <- fit %>%
augment(type.predict = "response", newdata = data.predict)
colnames(predicted_data)[colnames(predicted_data) == ".fitted"] <- "hit_percentage"
# construct heat percentage tile plot with strike zone boundary line
ggplot(predicted_data, aes(plate_x, plate_z)) +
geom_tile(aes(fill = hit_percentage)) +
scale_fill_distiller(palette = "Spectral") +
geom_path(data = strike_zone, aes(x, y)) +
coord_fixed() + xlab("plate_x (ft)") + ylab("plate_z (ft)")
}
pitch_freq <- function(data) {
#Divide zone into box of 0.05 (ft^2)
data <- data %>%
mutate(plate_x_tenth = 0.15 * round(plate_x / 0.15, 0),
plate_z_tenth = 0.15 * round(plate_z / 0.15, 0))
#Count the frequency of pitch in each box
pitch_grouped <- data %>%
dplyr::group_by(plate_x_tenth, plate_z_tenth) %>%
dplyr::summarize(frequency = n())
#Plot pitch location frequency with strike zone boundary line
ggplot(pitch_grouped, aes(plate_x_tenth, plate_z_tenth)) +
geom_tile(aes(fill = frequency)) +
geom_path(data = strike_zone, aes(x, y)) +
scale_fill_viridis_c(option = "B", direction = -1) +
coord_fixed() +
xlim(c(-1.5, 1.5)) +
ylim(c(0.5, 5)) + xlab("plate_x (ft)") + ylab("plate_z (ft)")
}
ui <- dashboardPage(skin = "green",
# Application title
dashboardHeader(title = "Pitcher Data"),
# Sidebar
dashboardSidebar(),
dashboardBody(
box(title = "Inputs", width = 3,
selectizeInput("year", "Select Year", choices = unique(sc4$game_year)),
selectizeInput("name", "Select Pitcher", choices = unique(sc4$Name)),
selectizeInput("type", "Select Pitch Type", choices = unique(sc4$pitch_type))),
box(title = "Table", width = 9, height = 300,
tableOutput("table")),
box(title = "Plot1", width = 6,
girafeOutput("plot1")),
box(title = "Plot2", width = 6,
girafeOutput("plot2"))
)
)
# Define server logic required to react to inputs and plot data
server <- function(input, output, session) {
#Filtering data depending on inputs for Plot 1
sc_reactive <- reactive({
sc4 %>%
filter(game_year == input$year,
Name == input$name,
pitch_type == input$type)
})
#Filtering data depending on inputs for Plot 2
sc_reactive2 <- reactive({
sc5 %>%
filter(game_year == input$year,
Name == input$name,
pitch_type == input$type)
})
#Reactor for input: year
years <- reactive({
year <- subset(sc4, game_year == input$year)
year <- select(year, "Name")
})
observe({
updateSelectizeInput(session, "name", choices = years())
})
#Reactor for input: name
names <- reactive({
sc4 %>% dplyr::filter(Name == input$name) %>%
select(pitch_type)
})
observe({
updateSelectizeInput(session, "type", choices = names())
})
#Table
output$table <- renderTable({
#Use data from baseball savant
sc_reactive() %>% select(WAR, p_win, p_loss, pitch_count, p_era, in_zone_percent, frac_offspeed, whiff_percent, p_k_percent, p_bb_percent, fastball_avg_speed, offspeed_avg_speed) %>% head(1)
})
#Plot 1: Hit Percentage by Location
output$plot1 <- renderGirafe({
pitcher_map <- hit_likely(sc_reactive())
g <- pitcher_map + theme_void() + coord_fixed() +
ggtitle(paste(input$name, "Hit Percentage by Location for", input$type, "in ", input$year))
girafe(ggobj = g)
})
#Plot 2: Pitch Location Frequency
output$plot2 <- renderGirafe({
frequency_map <- pitch_freq(sc_reactive2())
g <- frequency_map + theme_void() + coord_fixed() +
labs(title = paste(input$name, "Pitch Location Frequency for ", input$type, "in ", input$year))
girafe(ggobj = g)
})
}
shinyApp(ui = ui, server = server)
View(p_data2)
m1 <- lm(WAR ~ p_k_percent, p_bb_percent, f_strike_percent)
m1 <- lm(WAR ~ p_k_percent, p_bb_percent, f_strike_percent, data = p_data2)
p_data3 <- p_data2
m1 <- lm(WAR ~ p_k_percent, p_bb_percent, f_strike_percent, data = p_data3)
set.seed(13)
ind <- sample(1:nrow(p_data), size = 400, replace = FALSE)
train <- p_data3[ind, ]
test <- p_data[-ind, ]
set.seed(13)
ind <- sample(1:nrow(p_data), size = 400, replace = FALSE)
train <- p_data3[ind, ]
test <- p_data3[-ind, ]
set.seed(13)
ind <- sample(1:nrow(p_data), size = 100, replace = FALSE)
train <- p_data3[ind, ]
test <- p_data3[-ind, ]
set.seed(13)
ind <- sample(1:nrow(p_data), size = 200, replace = FALSE)
train <- p_data3[ind, ]
test <- p_data3[-ind, ]
m1 <- lm(WAR ~ p_k_percent, p_bb_percent, f_strike_percent, data = train)
test1 <- test
test1$Prediction <- predict(m1, test1)
sqrt(mean((test1$WAR - test1$Prediction)^2))
summary(m1)
m1 <- lm(WAR ~ p_k_percent + p_bb_percent + f_strike_percent, data = train)
test1 <- test
test1$Prediction <- predict(m1, test1)
sqrt(mean((test1$WAR - test1$Prediction)^2))
summary(m1)
plot(m1)
sqrt(mean((test2$WAR - test2$Prediction)^2))
sqrt(mean((test1$WAR - test1$Prediction)^2))
m2 <- lm(WAR ~ p_k_percent + p_bb_percent + f_strike_percent + fastball_avg_speed + offspeed_avg_speed + in_zone_percent + edge_percent, data = train)
test2 <- test
test2$Prediction <- predict(m2, test2)
sqrt(mean((test2$WAR - test2$Prediction)^2))
m2 <- lm(WAR ~ p_k_percent + p_bb_percent + f_strike_percent + fastball_avg_speed + offspeed_avg_speed + in_zone_percent + edge_percent, data = train)
test2 <- test
test2$Prediction <- predict(m2, test2)
sqrt(mean((test2$WAR - test2$Prediction)^2))
summary(m2)
test2 <- test
test2$Prediction <- predict(m2, test2)
test2$Prediction
View(test2)
View(test1)
#Split
p_data3 <- p_data2 %>%
na.omit()
p_data3 <- p_data2 %>%
filter(!is.na(fastball_avg_speed),
!is.na(offspeed_avg_speed),
!is.na(offspeed_avg_break),
!is.na(in_zone_percent),
!is.na(edge_percent))
set.seed(13)
ind <- sample(1:nrow(p_data), size = 200, replace = FALSE)
train <- p_data3[ind, ]
test <- p_data3[-ind, ]
m1 <- lm(WAR ~ p_k_percent + p_bb_percent + f_strike_percent, data = train)
test1 <- test
test1$Prediction <- predict(m1, test1)
sqrt(mean((test1$WAR - test1$Prediction)^2))
m2 <- lm(WAR ~ p_k_percent + p_bb_percent + f_strike_percent + fastball_avg_speed + offspeed_avg_speed + in_zone_percent + edge_percent, data = train)
test2 <- test
test2$Prediction <- predict(m2, test2)
sqrt(mean((test2$WAR - test2$Prediction)^2))
summary(m2)
m2 <- lm(WAR ~ p_k_percent + p_bb_percent + f_strike_percent + fastball_avg_speed + offspeed_avg_speed + edge_percent, data = train)
test2 <- test
test2$Prediction <- predict(m2, test2)
sqrt(mean((test2$WAR - test2$Prediction)^2))
m2 <- lm(WAR ~ p_k_percent + p_bb_percent + f_strike_percent + fastball_avg_speed + fastball_avg_break + offspeed_avg_speed + offspeed_avg_break + in_zone_percent + edge_percent, data = train)
test2 <- test
test2$Prediction <- predict(m2, test2)
sqrt(mean((test2$WAR - test2$Prediction)^2))
m2 <- lm(WAR ~ p_k_percent + p_bb_percent + f_strike_percent + fastball_avg_speed + fastball_avg_break + offspeed_avg_speed + offspeed_avg_break + in_zone_percent, data = train)
test2 <- test
test2$Prediction <- predict(m2, test2)
sqrt(mean((test2$WAR - test2$Prediction)^2))
m2 <- lm(WAR ~ p_k_percent + p_bb_percent + f_strike_percent + fastball_avg_speed + fastball_avg_break + offspeed_avg_speed + offspeed_avg_break + edge_percent, data = train)
test2 <- test
test2$Prediction <- predict(m2, test2)
sqrt(mean((test2$WAR - test2$Prediction)^2))
m2 <- lm(WAR ~ p_k_percent + p_bb_percent + f_strike_percent + fastball_avg_speed + fastball_avg_break + offspeed_avg_speed + in_zone_percent + edge_percent, data = train)
test2 <- test
test2$Prediction <- predict(m2, test2)
sqrt(mean((test2$WAR - test2$Prediction)^2))
m2 <- lm(WAR ~ p_k_percent + p_bb_percent + f_strike_percent + fastball_avg_speed + fastball_avg_break + in_zone_percent + edge_percent, data = train)
test2 <- test
test2$Prediction <- predict(m2, test2)
sqrt(mean((test2$WAR - test2$Prediction)^2))
m2 <- lm(WAR ~ p_k_percent + p_bb_percent + f_strike_percent + fastball_avg_speed + fastball_avg_break + in_zone_percent + edge_percent, data = train)
test2 <- test
test2$Prediction <- predict(m2, test2)
sqrt(mean((test2$WAR - test2$Prediction)^2))
m2 <- lm(WAR ~ p_k_percent + p_bb_percent + f_strike_percent + fastball_avg_speed + in_zone_percent + edge_percent, data = train)
test2 <- test
test2$Prediction <- predict(m2, test2)
sqrt(mean((test2$WAR - test2$Prediction)^2))
m2 <- lm(WAR ~ p_k_percent + p_bb_percent + f_strike_percent + in_zone_percent + edge_percent, data = train)
test2 <- test
test2$Prediction <- predict(m2, test2)
sqrt(mean((test2$WAR - test2$Prediction)^2))
m2 <- lm(WAR ~ p_k_percent + p_bb_percent + fastball_avg_speed + in_zone_percent + edge_percent, data = train)
test2 <- test
test2$Prediction <- predict(m2, test2)
sqrt(mean((test2$WAR - test2$Prediction)^2))
m2 <- lm(WAR ~ p_k_percent + fastball_avg_speed + in_zone_percent + edge_percent, data = train)
test2 <- test
test2$Prediction <- predict(m2, test2)
sqrt(mean((test2$WAR - test2$Prediction)^2))
m2 <- lm(WAR ~ p_bb_percent + fastball_avg_speed + in_zone_percent + edge_percent, data = train)
test2 <- test
test2$Prediction <- predict(m2, test2)
sqrt(mean((test2$WAR - test2$Prediction)^2))
m2 <- lm(WAR ~ p_k_percent + p_bb_percent + fastball_avg_speed + in_zone_percent + edge_percent, data = train)
test2 <- test
test2$Prediction <- predict(m2, test2)
sqrt(mean((test2$WAR - test2$Prediction)^2))
m1 <- lm(WAR ~ p_k_percent + p_bb_percent + f_strike_percent, data = train)
test1 <- test
test1$Prediction <- predict(m1, test1)
sqrt(mean((test1$WAR - test1$Prediction)^2))
m2 <- lm(WAR ~ p_k_percent + p_bb_percent + fastball_avg_speed + in_zone_percent, data = train)
test2 <- test
test2$Prediction <- predict(m2, test2)
sqrt(mean((test2$WAR - test2$Prediction)^2))
summary(m2)
m2 <- lm(WAR ~ p_k_percent + p_bb_percent + fastball_avg_speed + in_zone_percent + edge_percent, data = train)
test2 <- test
test2$Prediction <- predict(m2, test2)
sqrt(mean((test2$WAR - test2$Prediction)^2))
summary(m2)
sc5 %>% filter(Name == "Shohei Ohtani")
sc5 %>% filter(game_year == 2022, Name == "Shohei Ohtani")
Chapman_data3 <- sc4 %>% filter(Name == "Aroldis Chapman",
pitch_type == "SL")
Chapman_data4 <- sc5 %>% filter(Name == "Aroldis Chapman",
pitch_type == "SL")
Rogers_data3 <- sc4 %>% filter(Name == "Tyler Rogers",
pitch_type == "SL")
Rogers_data4 <- sc5 %>% filter(Name == "Tyler Rogers",
pitch_type == "SL")
#Chapman (lefty) vs Rogers (under throw)
Chapman_3 <- hit_likely(Chapman_data3) + labs(title = "Aroldis Chapman SL Hit Percentage")
Chapman_4 <- pitch_freq(Chapman_data4) + labs(title = "Aroldis Chapman SL Pitch Frequency")
Rogers_3 <- hit_likely(Rogers_data3) + labs(title = "Tyler Rogers SL Hit Percentage")
Rogers_4 <- pitch_freq(Rogers_data4) + labs(title = "Tyler Rogers SL Pitch Frequency")
ggarrange(Chapman_3, Chapman_4, Rogers_3, Rogers_4, ncol = 2)
library(ggpubr)
#Ohtani vs Keller: SL
Ohtani_1 <- hit_likely(Ohtani_data) + labs(title = "Shohei Ohtani SL Hit Percentage")
Ohtani_2 <- pitch_freq(Ohtani_data2) + labs(title = "Shohei Ohtani SL Pitch Frequency")
Keller_1 <- hit_likely(Keller_data) + labs(title = "Mitch Keller SL Hit Percentage")
Keller_2 <- pitch_freq(Keller_data2) + labs(title = "Mitch Keller SL Pitch Frequency")
ggarrange(Ohtani_1, Ohtani_2, Keller_1, Keller_2, ncol = 2)
#Chapman (lefty) vs Rogers (under throw): FF
Chapman_1 <- hit_likely(Chapman_data) + labs(title = "Aroldis Chapman FF Hit Percentage")
Chapman_2 <- pitch_freq(Chapman_data2) + labs(title = "Aroldis Chapman FF Pitch Frequency")
Rogers_1 <- hit_likely(Rogers_data) + labs(title = "Tyler Rogers FF Hit Percentage")
Rogers_2 <- pitch_freq(Rogers_data2) + labs(title = "Tyler Rogers FF Pitch Frequency")
ggarrange(Chapman_1, Chapman_2, Rogers_1, Rogers_2, ncol = 2)
#Split
p_data3 <- p_data2
set.seed(13)
ind <- sample(1:nrow(p_data2), size = 200, replace = FALSE)
train <- p_data3[ind, ]
test <- p_data3[-ind, ]
m2 <- lm(WAR ~ p_k_percent + p_bb_percent + fastball_avg_speed + in_zone_percent + edge_percent, data = train)
test2 <- test
test2$Prediction <- predict(m2, test2)
sqrt(mean((test2$WAR - test2$Prediction)^2))
m2 <- lm(WAR ~ p_k_percent + p_bb_percent + fastball_avg_speed + in_zone_percent + edge_percent + fastball_avg_speed, data = train)
test2 <- test
test2$Prediction <- predict(m2, test2)
sqrt(mean((test2$WAR - test2$Prediction)^2))
m2 <- lm(WAR ~ p_k_percent + p_bb_percent + fastball_avg_speed + in_zone_percent + edge_percent + fastball_avg_break, data = train)
test2 <- test
test2$Prediction <- predict(m2, test2)
sqrt(mean((test2$WAR - test2$Prediction)^2))
m2 <- lm(WAR ~ p_k_percent + p_bb_percent + fastball_avg_speed + in_zone_percent + edge_percent + off_speed_avg_break, data = train)
m2 <- lm(WAR ~ p_k_percent + p_bb_percent + fastball_avg_speed + in_zone_percent + edge_percent + offspeed_avg_break, data = train)
test2 <- test
test2$Prediction <- predict(m2, test2)
sqrt(mean((test2$WAR - test2$Prediction)^2))
m2 <- lm(WAR ~ p_k_percent + p_bb_percent + fastball_avg_speed + in_zone_percent + edge_percent, data = train)
test2 <- test
test2$Prediction <- predict(m2, test2)
sqrt(mean((test2$WAR - test2$Prediction)^2))
ind <- sample(1:nrow(p_data2), size = 300, replace = FALSE)
train <- p_data3[ind, ]
test <- p_data3[-ind, ]
m2 <- lm(WAR ~ p_k_percent + p_bb_percent + fastball_avg_speed + in_zone_percent + edge_percent, data = train)
test2 <- test
test2$Prediction <- predict(m2, test2)
sqrt(mean((test2$WAR - test2$Prediction)^2))
pitch_freq <- function(data) {
#Divide zone into box of 0.15 (ft^2)
data <- data %>%
mutate(plate_x_fifteenth = 0.15 * round(plate_x / 0.15, 0),
plate_z_fifteenth = 0.15 * round(plate_z / 0.15, 0))
#Count the frequency of pitch in each box
pitch_grouped <- data %>%
dplyr::group_by(plate_x_fifteenth, plate_z_fifteenth) %>%
dplyr::summarize(frequency = n())
#Plot pitch location frequency with strike zone boundary line
ggplot(pitch_grouped, aes(plate_x_fifteenth, plate_z_fifteenth)) +
geom_tile(aes(fill = frequency)) +
geom_path(data = strike_zone, aes(x, y)) +
scale_fill_viridis_c(option = "B", direction = -1) +
coord_fixed() +
xlim(c(-1.5, 1.5)) +
ylim(c(0.5, 5)) + xlab("plate_x (ft)") + ylab("plate_z (ft)")
}
ui <- dashboardPage(skin = "green",
# Application title
dashboardHeader(title = "Pitcher Data"),
# Sidebar
dashboardSidebar(),
dashboardBody(
box(title = "Inputs", width = 3,
selectizeInput("year", "Select Year", choices = unique(sc4$game_year)),
selectizeInput("name", "Select Pitcher", choices = unique(sc4$Name)),
selectizeInput("type", "Select Pitch Type", choices = unique(sc4$pitch_type))),
box(title = "Table", width = 9, height = 300,
tableOutput("table")),
box(title = "Plot1", width = 6,
girafeOutput("plot1")),
box(title = "Plot2", width = 6,
girafeOutput("plot2"))
)
)
# Define server logic required to react to inputs and plot data
server <- function(input, output, session) {
#Filtering data depending on inputs for Plot 1
sc_reactive <- reactive({
sc4 %>%
filter(game_year == input$year,
Name == input$name,
pitch_type == input$type)
})
#Filtering data depending on inputs for Plot 2
sc_reactive2 <- reactive({
sc5 %>%
filter(game_year == input$year,
Name == input$name,
pitch_type == input$type)
})
#Reactor for input: year
years <- reactive({
year <- subset(sc4, game_year == input$year)
year <- select(year, "Name")
})
observe({
updateSelectizeInput(session, "name", choices = years())
})
#Reactor for input: name
names <- reactive({
sc4 %>% dplyr::filter(Name == input$name) %>%
select(pitch_type)
})
observe({
updateSelectizeInput(session, "type", choices = names())
})
#Table
output$table <- renderTable({
#Use data from baseball savant
sc_reactive() %>% select(WAR, p_win, p_loss, pitch_count, p_era, in_zone_percent, frac_offspeed, whiff_percent, p_k_percent, p_bb_percent, fastball_avg_speed, offspeed_avg_speed) %>% head(1)
})
#Plot 1: Hit Percentage by Location
output$plot1 <- renderGirafe({
pitcher_map <- hit_likely(sc_reactive())
g <- pitcher_map + theme_void() + coord_fixed() +
ggtitle(paste(input$name, "Hit Percentage by Location for", input$type, "in ", input$year))
girafe(ggobj = g)
})
#Plot 2: Pitch Location Frequency
output$plot2 <- renderGirafe({
frequency_map <- pitch_freq(sc_reactive2())
g <- frequency_map + theme_void() + coord_fixed() +
labs(title = paste(input$name, "Pitch Location Frequency for ", input$type, "in ", input$year))
girafe(ggobj = g)
})
}
# Run the application
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
# Run the application
shinyApp(ui = ui, server = server)
