classification = TRUE,
importance = "impurity")
#table(rangerMod$predictions)
fastball_RHP_forest$variable.importance
fastball_RHP_forest$confusion.matrix
fastball_RHP_pred = predict(fastball_RHP_forest, data = testFastballRight)
fastball_RHP_confmat = confusionMatrix(data = fastball_RHP_pred$predictions, reference = testFastballRight$PitchCall)
fastball_RHP_confmat$overall[1]
# summary(prcomp(~ PlateLocHeight + PlateLocSide + RelSpeed + RelHeight + RelSide + Extension + VertRelAngle + HorzRelAngle, trainFastballRight))
fastballSwingsRight = fastballSwings %>%
filter(PitcherThrows == "Right")
#splitting into training and testing data
fastballSwingsRight$id = 1:nrow(fastballSwingsRight)
trainFastballRight = fastballSwingsRight %>% dplyr::sample_frac(0.80)
testFastballRight = dplyr::anti_join(fastballSwingsRight, trainFastballRight, by = 'id')
trainFastballRight = trainFastballRight %>% select(-c(id, TaggedPitchType))
testFastballRight = testFastballRight %>% select(-c(id, TaggedPitchType))
#This is RHP model, about 83% accurate
#PlateLocHeight + PlateLocSide + RelSpeed + RelHeight + RelSide + Extension + VertRelAngle + HorzRelAngle + HorzBreak + InducedVertBreak + SpinRate
fastball_RHP_forest = ranger(PitchCall ~ PlateLocHeight + PlateLocSide + RelSpeed + HorzBreak + InducedVertBreak,
data = trainFastballRight,
num.trees = 100,
mtry = 5,
min.node.size = 1,
classification = TRUE,
importance = "impurity")
#table(rangerMod$predictions)
fastball_RHP_forest$variable.importance
fastball_RHP_forest$confusion.matrix
fastball_RHP_pred = predict(fastball_RHP_forest, data = testFastballRight)
fastball_RHP_confmat = confusionMatrix(data = fastball_RHP_pred$predictions, reference = testFastballRight$PitchCall)
fastball_RHP_confmat$overall[1]
# summary(prcomp(~ PlateLocHeight + PlateLocSide + RelSpeed + RelHeight + RelSide + Extension + VertRelAngle + HorzRelAngle, trainFastballRight))
fastballSwingsRight = fastballSwings %>%
filter(PitcherThrows == "Right")
#splitting into training and testing data
fastballSwingsRight$id = 1:nrow(fastballSwingsRight)
trainFastballRight = fastballSwingsRight %>% dplyr::sample_frac(0.80)
testFastballRight = dplyr::anti_join(fastballSwingsRight, trainFastballRight, by = 'id')
trainFastballRight = trainFastballRight %>% select(-c(id, TaggedPitchType))
testFastballRight = testFastballRight %>% select(-c(id, TaggedPitchType))
#This is RHP model, about 83% accurate
#PlateLocHeight + PlateLocSide + RelSpeed + RelHeight + RelSide + Extension + VertRelAngle + HorzRelAngle + HorzBreak + InducedVertBreak + SpinRate
fastball_RHP_forest = ranger(PitchCall ~ PlateLocHeight + PlateLocSide + RelSpeed + RelHeight + RelSide + Extension + VertRelAngle + HorzRelAngle + HorzBreak + InducedVertBreak + SpinRate,
num.trees = 100,
mtry = 5,
min.node.size = 1,
classification = TRUE,
importance = "impurity")
fastballSwingsRight = fastballSwings %>%
filter(PitcherThrows == "Right")
#splitting into training and testing data
fastballSwingsRight$id = 1:nrow(fastballSwingsRight)
trainFastballRight = fastballSwingsRight %>% dplyr::sample_frac(0.80)
testFastballRight = dplyr::anti_join(fastballSwingsRight, trainFastballRight, by = 'id')
trainFastballRight = trainFastballRight %>% select(-c(id, TaggedPitchType))
testFastballRight = testFastballRight %>% select(-c(id, TaggedPitchType))
#This is RHP model, about 83% accurate
#PlateLocHeight + PlateLocSide + RelSpeed + RelHeight + RelSide + Extension + VertRelAngle + HorzRelAngle + HorzBreak + InducedVertBreak + SpinRate
fastball_RHP_forest = ranger(PitchCall ~ PlateLocHeight + PlateLocSide + RelSpeed + RelHeight + RelSide + Extension + VertRelAngle + HorzRelAngle + HorzBreak + InducedVertBreak + SpinRate,
num.trees = 100,
mtry = 5,
min.node.size = 1,
classification = TRUE,
importance = "impurity")
fastball_RHP_forest = ranger(PitchCall ~ PlateLocHeight + PlateLocSide + RelSpeed + RelHeight + RelSide + Extension + VertRelAngle + HorzRelAngle + HorzBreak + InducedVertBreak + SpinRate,
num.trees = 100,
mtry = 5,
min.node.size = 1,
classification = TRUE,
importance = "impurity")
fastballSwingsRight = fastballSwings %>%
filter(PitcherThrows == "Right")
#splitting into training and testing data
fastballSwingsRight$id = 1:nrow(fastballSwingsRight)
trainFastballRight = fastballSwingsRight %>% dplyr::sample_frac(0.80)
testFastballRight = dplyr::anti_join(fastballSwingsRight, trainFastballRight, by = 'id')
trainFastballRight = trainFastballRight %>% select(-c(id, TaggedPitchType))
testFastballRight = testFastballRight %>% select(-c(id, TaggedPitchType))
#This is RHP model, about 83% accurate
#PlateLocHeight + PlateLocSide + RelSpeed + RelHeight + RelSide + Extension + VertRelAngle + HorzRelAngle + HorzBreak + InducedVertBreak + SpinRate
fastball_RHP_forest = ranger(PitchCall ~ PlateLocHeight + PlateLocSide + RelSpeed + RelHeight + RelSide + Extension + VertRelAngle + HorzRelAngle + HorzBreak + InducedVertBreak + SpinRate,
data = trainFastballRight,
num.trees = 100,
mtry = 5,
min.node.size = 1,
classification = TRUE,
importance = "impurity")
#table(rangerMod$predictions)
fastball_RHP_forest$variable.importance
fastball_RHP_forest$confusion.matrix
fastball_RHP_pred = predict(fastball_RHP_forest, data = testFastballRight)
fastball_RHP_confmat = confusionMatrix(data = fastball_RHP_pred$predictions, reference = testFastballRight$PitchCall)
fastball_RHP_confmat$overall[1]
# summary(prcomp(~ PlateLocHeight + PlateLocSide + RelSpeed + RelHeight + RelSide + Extension + VertRelAngle + HorzRelAngle, trainFastballRight))
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
#Import shiny package
library(shiny)
library(Lahman)
library(dplyr)
#Obtain data
data_batting <- Batting
data_people <- People
data_batting2 <- inner_join(data_batting, data_people, by = c("playerID")) %>%
mutate(player_name = paste(nameFirst, nameLast))
View(data_batting)
#Obtain data
data_batting <- Batting
data_people <- People
data_batting2 <- inner_join(data_batting, data_people, by = c("playerID")) %>%
mutate(player_name = paste(nameFirst, nameLast))
data_batting3 <- data_batting2 %>%
filter(yearID > 2015)
# Define UI for application that displays seasonal stats for each player
ui <- fluidPage(
# Application title
titlePanel("Player Seasonal Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
selectInput("name",
"Select Batter:",
choices = data_batting3$player_name )
),
# Show a plot of the generated distribution
mainPanel(
tableOutput("table")
)
)
)
# Define server logic required to display a table
server <- function(input, output) {
output$table <- renderTable({
data_batting3 %>% filter(player_name == input$name)
})
}
# Run the application
shinyApp(ui = ui, server = server)
View(data_batting3)
View(data_people)
data_team <- Teams
View(data_team)
View(data_batting2)
data_batting4 <- inner_join(data_batting2, data_team, by = c("teamID", "franchID"))
data_batting4 <- inner_join(data_batting2, data_team, by = c("teamID" = "franchID"))
View(data_batting4)
data_batting4 <- left_join(data_batting2, data_team, by = c("teamID" = "franchID"))
View(data_batting4)
data_batting3 <- data_batting2 %>%
filter(yearID > 2015) %>%
mutate(franchID = teamID)
data_batting4 <- left_join(data_batting2, data_team, by = c("franchID"))
data_batting2 <- inner_join(data_batting, data_people, by = c("playerID")) %>%
mutate(player_name = paste(nameFirst, nameLast)) %>%
mutate(franchID = teamID)
data_batting4 <- left_join(data_batting2, data_team, by = c("franchID"))
data_team2 <- data_team %>%
filter(yearID > 2015)
View(data_team2)
data_team2 <- data_team %>%
filter(yearID == 2021)
data_batting4 <- left_join(data_batting2, data_team2, by = c("franchID"))
data_batting4 <- left_join(data_batting2, data_team2, by = c("franchID"))
View(data_batting4)
data_batting3 <- data_batting2 %>%
filter(yearID > 2015) %>%
select(franchID, name)
data_team2 <- data_team %>%
filter(yearID == 2021) %>%
select(franchID, name)
data_batting4 <- left_join(data_batting2, data_team2, by = c("franchID"))
View(data_batting4)
#Obtain data
data_batting <- Batting
data_people <- People
data_batting2 <- inner_join(data_batting, data_people, by = c("playerID")) %>%
mutate(player_name = paste(nameFirst, nameLast)) %>%
mutate(franchID = teamID)
data_batting3 <- data_batting2 %>%
filter(yearID > 2015) %>%
data_team <- Teams
data_team2 <- data_team %>%
filter(yearID == 2021) %>%
select(teamID, name)
data_batting2 <- inner_join(data_batting, data_people, by = c("playerID")) %>%
mutate(player_name = paste(nameFirst, nameLast)) %>%
mutate(franchID = teamID)
data_batting3 <- data_batting2 %>%
filter(yearID > 2015)
View(data_batting3)
data_batting4 <- left_join(data_batting3, data_team2, by = c("franchID"))
data_batting4 <- left_join(data_batting3, data_team2, by = c("teamID"))
View(data_batting4)
colnames(data_batting4)[which(names(data_batting4) == "name")] <- "team_name"
View(data_batting4)
# Define UI for application that displays seasonal stats for each player
ui <- fluidPage(
# Application title
titlePanel("Player Seasonal Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
selectInput("team",
"Select Team:",
choices = data_batting4$team_name),
selectInput("name",
"Select Batter:",
choices = data_batting4$player_name)
),
# Show a plot of the generated distribution
mainPanel(
tableOutput("table")
)
)
)
# Define server logic required to display a table
server <- function(input, output) {
output$table <- renderTable({
data_batting4 %>%
filter(team_name == input$team,
player_name == input$name)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define server logic required to display a table
server <- function(input, output) {
output$table <- renderTable({
data_batting4 %>%
filter(player_name == input$name)
})
output$table <- renderTable({
data_batting4 %>%
filter(player_name == input$name)
})
}
# Define server logic required to display a table
server <- function(input, output) {
output$table <- renderTable({
data_batting4 %>%
filter(team_name == input$team)
})
output$table <- renderTable({
data_batting4 %>%
filter(player_name == input$name)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define server logic required to display a table
server <- function(input, output, session) {
sc_reactive <- reactive({
data_batting4 %>% filter(player_name == input$name)
})
teams <- reactive({
team <- subset(data_batting4, team_name %in% input$team)
team <- select(team, "(player_name")
})
observe({
updateSelectInput(session, "name", choices = teams(),
selected = NULL)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define server logic required to display a table
server <- function(input, output, session) {
sc_reactive <- reactive({
data_batting4 %>% filter(player_name == input$name)
})
teams <- reactive({
team <- subset(data_batting4, team_name %in% input$team)
team <- select(team, "player_name")
})
observe({
updateSelectInput(session, "name", choices = teams(),
selected = NULL)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define server logic required to display a table
server <- function(input, output, session) {
sc_reactive <- reactive({
data_batting4 %>% filter(player_name == input$name)
})
teams <- reactive({
team <- subset(data_batting4, team_name %in% input$team)
team <- select(team, "player_name")
})
observe({
updateSelectInput(session, "name", choices = teams(),
selected = NULL)
})
output$table <- renderTable({
sc_reactive()
})
}
# Run the application
shinyApp(ui = ui, server = server)
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
#Import packages
library(dplyr)
library(ggplot2)
library(plotly)
library(plotly)
library(reshape2)
data_batting <- Batting
#Obtain MLB data from 2017, 2018, 2019, and 2021 season
data_2017 <- read_csv("C:/Users/12244/STAT430/statcast_data/2017.csv")
#Import packages
library(dplyr)
library(ggplot2)
library(plotly)
library(plotly)
library(reshape2)
#Obtain MLB data from 2017, 2018, 2019, and 2021 season
data_2017 <- read_csv("C:/Users/12244/STAT430/statcast_data/2017.csv")
#Obtain MLB data from 2017, 2018, 2019, and 2021 season
library(tidyverse)
#Obtain MLB data from 2017, 2018, 2019, and 2021 season
library(tidyverse)
data_2017 <- read_csv("C:/Users/12244/STAT430/statcast_data/2017.csv")
data_2018 <- read_csv("C:/Users/12244/STAT430/statcast_data/2018.csv")
data_2019 <- read_csv("C:/Users/12244/STAT430/statcast_data/2019.csv")
data_2021 <- read_csv("C:/Users/12244/STAT430/statcast_data/2021.csv")
data_tot <- rbind(data_2017, data_2018, data_2019, data_2021)
inplay_data <- data_tot %>%
filter(!is.na(launch_speed),
!is.na(launch_angle),
!is.na(woba_value),
!(events %in% c("catcher_interf", "game_advisory")))
#out: 0, catcher interference: 0.7, single: 0.9, double: 1.25, triple: 1.6, home run: 2.0
p <- ggplot(inplay_data, aes(launch_angle, launch_speed, z = woba_value, colour = stat(level))) +
geom_contour(binwidth = 0.1) +
scale_fill_distiller(palette = "Spectral", direction = -1)
ggplotly(p)
sqrt(mean((inplay_data$woba_value - inplay_data$Prediction)^2))
inplay_data$Prediction <- predict(model)
#Linear regression model
model <- lm(woba_value ~ launch_speed + launch_angle, data = inplay_data)
#Linear regression model
model <- lm(woba_value ~ launch_speed + launch_angle^2, data = inplay_data)
inplay_data$Prediction <- predict(model)
sqrt(mean((inplay_data$woba_value - inplay_data$Prediction)^2))
#Linear regression model
model <- lm(woba_value ~ launch_speed + launch_angle, data = inplay_data)
inplay_data$Prediction <- predict(model)
sqrt(mean((inplay_data$woba_value - inplay_data$Prediction)^2))
inplay_data$launch_angle2 <- inplay_data$launch_angle^2
model <- lm(woba_value ~ launch_speed + launch_angle + launch_angle2, data = inplay_data)
inplay_data$Prediction <- predict(model)
sqrt(mean((inplay_data$woba_value - inplay_data$Prediction)^2))
fig <- plot_ly(x = inplay_data$launch_angle, y = inplay_data$launch_speed,
z = inplay_data$woba_value, type = "contour")
fig
inplay_data$woba_value.j <- jitter(inplay_data$woba_value, 1)
focus <- inplay_data %>%
select(launch_speed, launch_angle, woba_value.j, estimated_woba_using_speedangle)
pairs(focus)
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
#Scratch
data_2017 <- read.csv("C:/Users/12244/STAT430/statcast_data/2017.csv")
View(data_2017)
d2017 <- data_2017 %>%
filter(!events %in% c("walk", "hit_by_pitch", NA))
dx <- data_2017 %>%
filter(type == "X")
unique(dx$events)
names <- dx$player_name
first_names <- vector("list", length(names))
last_names <- vector("list", length(names))
full_name <- vector("list", length(names))
for (i in 1:length(names)) {
first_names[i] <- strsplit(names[i], ", ")[[1]][2]
last_names[i] <- strsplit(names[i], ", ")[[1]][1]
full_name[i] <- paste(first_names[i], last_names[i])
}
dx2 <- inner_join(dx, as.data.frame(full_name), by = character())
dx2 <- merge(dx, as.data.frame(full_name))
name_df <- as.data.frame(full_name)
View(full_name)
View(name_df)
name_df <- as.data.frame(full_name, ncol = 1)
View(name_df)
full_name
full_name[1]
name_data <- bind_rows(full_name)
dx$full_name <- full_name
View(dx)
dx %>% select(player_name, full_name)
dx$full_name <- as.String(full_name)
dx$full_name <- as.string(full_name)
dx %>% select(player_name, full_name)
full_name[1]
type(full_name[1])
type0f(full_name[1])
typeof(full_name[1])
typeof(full_name[[1])
typeof(full_name[[1]])
full_name[[1]]
first_names
names
full_name2 <- unlist(full_name)
full_name2
dx$full_name <- full_name2
dx %>% select(player_name, full_name)
topKzone <- 3.6
botKzone <- 1.5
inKzone <- -0.95
outKzone <- 0.95
kZone <- data.frame(
x=c(inKzone, inKzone, outKzone, outKzone, inKzone),
y=c(botKzone, topKzone, topKzone, botKzone, botKzone)
)
View(kZone)
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
library(Lahman)
library(dplyr)
library(mgcv)
library(broom)
library(ggplot2)
library(tidyverse)
data_2017 <- read.csv("C:/Users/12244/STAT430/statcast_data/2017.csv")
View(data_2017)
library(Lahman)
data_people <- People
View(data_people)
setwd("C:/Users/12244/R_projects2022")
View(data_people)
data_pitching <- Pitching
View(data_pitching)
data_master <- Master
data_master <- Master{Lahman}
playerid_lookup("Garcia", "Karim")
library(baseballr)
playerid_lookup("Garcia", "Karim")
playername_lookup(114588)
playername_lookup(572020)
playerid_lookup("Garcia", "Karim")
playername_lookup(572020)
playername_lookup(572020)
playerid_lookup("Garcia", "Karim")
playerid_lookup("Garcia", "Karim")$mlbam_id
dx <- data_2017 %>%
filter(type == "X",
!is.na(plate_x))
View(dx)
dx2 <- dx %>%
group_by(plate_x, plate_z) %>%
summarize(count = n())
View(dx2)
dx3 <- dx %>%
mutate(plate_x_tenth = round(plate_x, 1))
View(dx3)
dx3 <- dx %>%
mutate(plate_x_tenth = round(plate_x, 1),
plate_z_tenth = round(plate_z, 1))
dx4 <- dx3 %>%
group_by(plate_x_tenth, plate_z_tenth) %>%
summarize(count = n())
View(dx4)
dx4 <- dx3 %>%
group_by(plate_x_tenth, plate_z_tenth) %>%
summarize(freq = n())
ggplot(dx4, aes(plate_x_tenth, plate_z_tenth)) +
geom_tile(aes(fill = freq))
ggplot(dx4, aes(plate_x_tenth, plate_z_tenth)) +
geom_tile(aes(fill = freq)) +
scale_fill_distiller(palette = "Spectral")
ggplot(dx4, aes(plate_x_tenth, plate_z_tenth)) +
geom_tile(aes(fill = freq)) +
scale_fill_distiller(palette = "Spectral") +
geom_path(data = strike_zone, aes(x, y)) +
coord_fixed()
top_strike_zone <- 3.6
bottom_strike_zone <- 1.5
inside_strike_zone <- -0.95
outside_strike_zone <- 0.95
strike_zone <- data.frame(
x=c(inside_strike_zone, inside_strike_zone, outside_strike_zone, outside_strike_zone, inside_strike_zone),
y=c(bottom_strike_zone, top_strike_zone, top_strike_zone, bottom_strike_zone, bottom_strike_zone)
)
ggplot(dx4, aes(plate_x_tenth, plate_z_tenth)) +
geom_tile(aes(fill = freq)) +
scale_fill_distiller(palette = "Spectral") +
geom_path(data = strike_zone, aes(x, y)) +
coord_fixed()
ggplot(dx4, aes(plate_x_tenth, plate_z_tenth)) +
geom_tile(aes(fill = freq)) +
scale_fill_distiller(palette = "Spectral") +
geom_path(data = strike_zone, aes(x, y)) +
coord_fixed() +
scale_x_discrete(limits = c(-1.5, 1.5))
ggplot(dx4, aes(plate_x_tenth, plate_z_tenth)) +
geom_tile(aes(fill = freq)) +
scale_fill_distiller(palette = "Spectral") +
geom_path(data = strike_zone, aes(x, y)) +
coord_fixed() +
xlim(c(-1.5, 1.5))
ggplot(dx4, aes(plate_x_tenth, plate_z_tenth)) +
geom_tile(aes(fill = freq)) +
scale_fill_distiller(palette = "Spectral") +
geom_path(data = strike_zone, aes(x, y)) +
coord_fixed() +
xlim(c(-1.5, 1.5)) +
ylim(c(0.5, 5))
