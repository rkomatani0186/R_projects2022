})
sc_reactive2 <- reactive({
sc4 %>% dplyr::filter(pitch_type == input$type)
})
years <- reactive({
sc3 %>% dplyr::filter(game_year == input$year) %>%
select(Name)
})
observe({
updateSelectizeInput(session, "name", choices = years(),
selected = NULL)
})
names <- reactive({
sc3 %>% dplyr::filter(Name == input$name) %>%
select(pitch_type)
})
observe({
updateSelectizeInput(session, "type", choices = names(),
selected = NULL)
})
output$table <- DT::renderDataTable({
sc_reactive()
})
output$plot <- renderGirafe({
pitcher_map <- hit_likely(sc_reactive())
g <- pitcher_map + theme_void() + coord_fixed() +
ggtitle(paste(input$name, "Pitcher Hit Likely per Zone in year", input$year))
girafe(ggobj = g)
})
output$plot2 <- renderGirafe({
frequency_map <- pitch_freq(sc_reactive2())
g <- frequency_map + theme_void() + coord_fixed() +
ggtitle(paste(input$name, "Pitch Frequency", input$year))
girafe(ggobj = g)
})
}
shinyApp(ui = ui, server = server)
pitch_freq <- function(data) {
# only consider events that are official at-bats
data <- data %>%
filter(type == "X",
!is.na(plate_x),
!is.na(plate_z))
#Divide zone into box of 0.05 (ft^2)
data <- data %>%
mutate(plate_x_tenth = 0.05 * round(plate_x_tenth / 0.05, 0),
plate_z_tenth = 0.05 * round(plate_z_tenth / 0.05, 0))
#Count the frequency of pitch in each box
pitch_grouped <- data %>%
group_by(plate_x_tenth, plate_z_tenth) %>%
summarize(freq = n())
ggplot(pitch_grouped, aes(plate_x_tenth, plate_z_tenth)) +
geom_tile(aes(fill = freq)) +
geom_path(data = strike_zone, aes(x, y)) +
scale_fill_distiller(palette = "Spectral") +
coord_fixed() +
xlim(c(-1.5, 1.5)) +
ylim(c(0.5, 5))
}
ui <- dashboardPage(skin = "green",
# Application title
dashboardHeader(title = "Pitcher Data"),
# Sidebar
dashboardSidebar(),
dashboardBody(
box(title = "Inputs", width = 12,
selectizeInput("year", "Select Year", choices = unique(sc3$game_year)),
selectizeInput("name", "Select Pitcher", choices = unique(sc3$Name)),
selectizeInput("type", "Select Pitch Type", choices = unique(sc3$pitch_type))),
#sliderInput("ev", "Exit Velocity", min = 0, max = 120, value = 60)),
box(title = "Plot", width = 6,
girafeOutput("plot")),
box(title = "Plot2", width = 6,
girafeOutput("plot2")),
box(title = "Table", width = 12,
div(style = 'overflow-y:scroll;height:500px:',
DT::dataTableOutput("table")))
)
)
# Define server logic required to react to inputs and plot data
server <- function(input, output, session) {
sc_reactive <- reactive({
sc3 %>% dplyr::filter(pitch_type == input$type)
# select(Name, game_date, events, description, p_throws, release_speed, plate_x, plate_z, launch_angle, launch_speed, woba_value)
})
sc_reactive2 <- reactive({
sc4 %>% dplyr::filter(pitch_type == input$type)
})
years <- reactive({
sc3 %>% dplyr::filter(game_year == input$year) %>%
select(Name)
})
observe({
updateSelectizeInput(session, "name", choices = years(),
selected = NULL)
})
names <- reactive({
sc3 %>% dplyr::filter(Name == input$name) %>%
select(pitch_type)
})
observe({
updateSelectizeInput(session, "type", choices = names(),
selected = NULL)
})
output$table <- DT::renderDataTable({
sc_reactive()
})
output$plot <- renderGirafe({
pitcher_map <- hit_likely(sc_reactive())
g <- pitcher_map + theme_void() + coord_fixed() +
ggtitle(paste(input$name, "Pitcher Hit Likely per Zone in year", input$year))
girafe(ggobj = g)
})
output$plot2 <- renderGirafe({
frequency_map <- pitch_freq(sc_reactive2())
g <- frequency_map + theme_void() + coord_fixed() +
ggtitle(paste(input$name, "Pitch Frequency", input$year))
girafe(ggobj = g)
})
}
shinyApp(ui = ui, server = server)
pitch_freq <- function(data) {
# only consider events that are official at-bats
data <- data %>%
filter(type == "X",
!is.na(plate_x),
!is.na(plate_z))
#Divide zone into box of 0.05 (ft^2)
data <- data %>%
mutate(plate_x_tenth = 0.05 * round(plate_x_tenth / 0.05, 0),
plate_z_tenth = 0.05 * round(plate_z_tenth / 0.05, 0))
#Count the frequency of pitch in each box
pitch_grouped <- data %>%
group_by(plate_x_tenth, plate_z_tenth) %>%
summarize(freq = n())
ggplot(pitch_grouped, aes(plate_x_tenth, plate_z_tenth)) +
geom_tile(aes(fill = freq)) +
geom_path(data = strike_zone, aes(x, y)) +
scale_fill_distiller(palette = "Spectral") +
coord_fixed() +
xlim(c(-1.5, 1.5)) +
ylim(c(0.5, 5))
}
shinyApp(ui = ui, server = server)
sc5 <- sc4 %>%
mutate(plate_x_tenth = 0.05 * round(plate_x_tenth / 0.05, 0),
plate_z_tenth = 0.05 * round(plate_z_tenth / 0.05, 0))
sc5 <- sc4 %>%
mutate(plate_x_tenth = 5 * round(plate_x_tenth / 5, 0),
plate_z_tenth = 5 * round(plate_z_tenth / 5, 0))
setwd("C:/Users/12244/R_projects2022/R&D")
sc5 <- sc4 %>%
mutate(plate_x_tenth = 0.05 * round(plate_x / 0.05, 0),
plate_z_tenth = 0.05 * round(plate_z / 0.05, 0))
View(sc5)
pitch_freq <- function(data) {
# only consider events that are official at-bats
data <- data %>%
filter(type == "X",
!is.na(plate_x),
!is.na(plate_z))
#Divide zone into box of 0.05 (ft^2)
data <- data %>%
mutate(plate_x_tenth = 0.05 * round(plate_x / 0.05, 0),
plate_z_tenth = 0.05 * round(plate_z / 0.05, 0))
#Count the frequency of pitch in each box
pitch_grouped <- data %>%
group_by(plate_x_tenth, plate_z_tenth) %>%
summarize(freq = n())
ggplot(pitch_grouped, aes(plate_x_tenth, plate_z_tenth)) +
geom_tile(aes(fill = freq)) +
geom_path(data = strike_zone, aes(x, y)) +
scale_fill_distiller(palette = "Spectral") +
coord_fixed() +
xlim(c(-1.5, 1.5)) +
ylim(c(0.5, 5))
}
shinyApp(ui = ui, server = server)
hit_likely <- function(data) {
data <- data %>%
mutate(Hit = ifelse(events %in% c("single", "double", "triple", "home_run"), 1, 0))
# implement the GAM fit (logistic link)
fit <- gam(Hit ~ s(plate_x, plate_z), family = binomial, data = data)
# find predicted probabilities over a 50 x 50 grid
x <- seq(-1.5, 1.5, length.out=50)
y <- seq(0.5, 5, length.out=50)
data.predict <- data.frame(plate_x = c(outer(x, y * 0 + 1)),
plate_z = c(outer(x * 0 + 1, y)))
predicted_data <- fit %>%
augment(type.predict = "response", newdata = data.predict)
colnames(predicted_data)[colnames(predicted_data) == ".fitted"] <- "Hit Percentage"
# construct tile plot with strike zone boundary line
ggplot(predicted_data, aes(plate_x, plate_z)) +
geom_tile(aes(fill = .fitted)) +
scale_fill_distiller(palette = "Spectral") +
geom_path(data = strike_zone, aes(x, y)) +
coord_fixed()
}
pitch_freq <- function(data) {
# only consider events that are official at-bats
data <- data %>%
filter(type == "X",
!is.na(plate_x),
!is.na(plate_z))
#Divide zone into box of 0.05 (ft^2)
data <- data %>%
mutate(plate_x_tenth = 0.05 * round(plate_x / 0.05, 0),
plate_z_tenth = 0.05 * round(plate_z / 0.05, 0))
#Count the frequency of pitch in each box
pitch_grouped <- data %>%
group_by(plate_x_tenth, plate_z_tenth) %>%
summarize(frequency = n())
ggplot(pitch_grouped, aes(plate_x_tenth, plate_z_tenth)) +
geom_tile(aes(fill = frequency)) +
geom_path(data = strike_zone, aes(x, y)) +
scale_fill_distiller(palette = "Spectral") +
coord_fixed() +
xlim(c(-1.5, 1.5)) +
ylim(c(0.5, 5))
}
ui <- dashboardPage(skin = "green",
# Application title
dashboardHeader(title = "Pitcher Data"),
# Sidebar
dashboardSidebar(),
dashboardBody(
box(title = "Inputs", width = 12,
selectizeInput("year", "Select Year", choices = unique(sc3$game_year)),
selectizeInput("name", "Select Pitcher", choices = unique(sc3$Name)),
selectizeInput("type", "Select Pitch Type", choices = unique(sc3$pitch_type))),
#sliderInput("ev", "Exit Velocity", min = 0, max = 120, value = 60)),
box(title = "Plot", width = 6,
girafeOutput("plot")),
box(title = "Plot2", width = 6,
girafeOutput("plot2")),
box(title = "Table", width = 12,
div(style = 'overflow-y:scroll;height:500px:',
DT::dataTableOutput("table")))
)
)
# Define server logic required to react to inputs and plot data
server <- function(input, output, session) {
sc_reactive <- reactive({
sc3 %>% dplyr::filter(pitch_type == input$type)
# select(Name, game_date, events, description, p_throws, release_speed, plate_x, plate_z, launch_angle, launch_speed, woba_value)
})
sc_reactive2 <- reactive({
sc4 %>% dplyr::filter(pitch_type == input$type)
})
years <- reactive({
sc3 %>% dplyr::filter(game_year == input$year) %>%
select(Name)
})
observe({
updateSelectizeInput(session, "name", choices = years(),
selected = NULL)
})
names <- reactive({
sc3 %>% dplyr::filter(Name == input$name) %>%
select(pitch_type)
})
observe({
updateSelectizeInput(session, "type", choices = names(),
selected = NULL)
})
output$table <- DT::renderDataTable({
sc_reactive()
})
output$plot <- renderGirafe({
pitcher_map <- hit_likely(sc_reactive())
g <- pitcher_map + theme_void() + coord_fixed() +
ggtitle(paste(input$name, "Allowed Hits by Location", input$year))
girafe(ggobj = g)
})
output$plot2 <- renderGirafe({
frequency_map <- pitch_freq(sc_reactive2())
g <- frequency_map + theme_void() + coord_fixed() +
ggtitle(paste(input$name, "Pitch Location Frequency", input$year))
girafe(ggobj = g)
})
}
# Run the application
shinyApp(ui = ui, server = server)
hit_likely <- function(data) {
data <- data %>%
mutate(Hit = ifelse(events %in% c("single", "double", "triple", "home_run"), 1, 0))
# implement the GAM fit (logistic link)
fit <- gam(Hit ~ s(plate_x, plate_z), family = binomial, data = data)
# find predicted probabilities over a 50 x 50 grid
x <- seq(-1.5, 1.5, length.out=50)
y <- seq(0.5, 5, length.out=50)
data.predict <- data.frame(plate_x = c(outer(x, y * 0 + 1)),
plate_z = c(outer(x * 0 + 1, y)))
predicted_data <- fit %>%
augment(type.predict = "response", newdata = data.predict)
colnames(predicted_data)[colnames(predicted_data) == ".fitted"] <- "hit_percentage"
# construct tile plot with strike zone boundary line
ggplot(predicted_data, aes(plate_x, plate_z)) +
geom_tile(aes(fill = hit_percentage)) +
scale_fill_distiller(palette = "Spectral") +
geom_path(data = strike_zone, aes(x, y)) +
coord_fixed()
}
pitch_freq <- function(data) {
# only consider events that are official at-bats
data <- data %>%
filter(type == "X",
!is.na(plate_x),
!is.na(plate_z))
#Divide zone into box of 0.05 (ft^2)
data <- data %>%
mutate(plate_x_tenth = 0.05 * round(plate_x / 0.05, 0),
plate_z_tenth = 0.05 * round(plate_z / 0.05, 0))
#Count the frequency of pitch in each box
pitch_grouped <- data %>%
group_by(plate_x_tenth, plate_z_tenth) %>%
summarize(frequency = n())
ggplot(pitch_grouped, aes(plate_x_tenth, plate_z_tenth)) +
geom_tile(aes(fill = frequency)) +
geom_path(data = strike_zone, aes(x, y)) +
scale_fill_distiller(palette = "Spectral") +
coord_fixed() +
xlim(c(-1.5, 1.5)) +
ylim(c(0.5, 5))
}
ui <- dashboardPage(skin = "green",
# Application title
dashboardHeader(title = "Pitcher Data"),
# Sidebar
dashboardSidebar(),
dashboardBody(
box(title = "Inputs", width = 12,
selectizeInput("year", "Select Year", choices = unique(sc3$game_year)),
selectizeInput("name", "Select Pitcher", choices = unique(sc3$Name)),
selectizeInput("type", "Select Pitch Type", choices = unique(sc3$pitch_type))),
#sliderInput("ev", "Exit Velocity", min = 0, max = 120, value = 60)),
box(title = "Plot", width = 6,
girafeOutput("plot")),
box(title = "Plot2", width = 6,
girafeOutput("plot2")),
box(title = "Table", width = 12,
div(style = 'overflow-y:scroll;height:500px:',
DT::dataTableOutput("table")))
)
)
# Define server logic required to react to inputs and plot data
server <- function(input, output, session) {
sc_reactive <- reactive({
sc3 %>% dplyr::filter(pitch_type == input$type)
# select(Name, game_date, events, description, p_throws, release_speed, plate_x, plate_z, launch_angle, launch_speed, woba_value)
})
sc_reactive2 <- reactive({
sc4 %>% dplyr::filter(pitch_type == input$type)
})
years <- reactive({
sc3 %>% dplyr::filter(game_year == input$year) %>%
select(Name)
})
observe({
updateSelectizeInput(session, "name", choices = years(),
selected = NULL)
})
names <- reactive({
sc3 %>% dplyr::filter(Name == input$name) %>%
select(pitch_type)
})
observe({
updateSelectizeInput(session, "type", choices = names(),
selected = NULL)
})
output$table <- DT::renderDataTable({
sc_reactive()
})
output$plot <- renderGirafe({
pitcher_map <- hit_likely(sc_reactive())
g <- pitcher_map + theme_void() + coord_fixed() +
ggtitle(paste(input$name, "Allowed Hits by Location", input$year))
girafe(ggobj = g)
})
output$plot2 <- renderGirafe({
frequency_map <- pitch_freq(sc_reactive2())
g <- frequency_map + theme_void() + coord_fixed() +
ggtitle(paste(input$name, "Pitch Location Frequency", input$year))
girafe(ggobj = g)
})
}
# Run the application
shinyApp(ui = ui, server = server)
server <- function(input, output, session) {
sc_reactive <- reactive({
sc3 %>% dplyr::filter(pitch_type == input$type)
# select(Name, game_date, events, description, p_throws, release_speed, plate_x, plate_z, launch_angle, launch_speed, woba_value)
})
sc_reactive2 <- reactive({
sc4 %>% dplyr::filter(pitch_type == input$type)
})
years <- reactive({
sc3 %>% dplyr::filter(game_year == input$year) %>%
select(Name)
})
observe({
updateSelectizeInput(session, "name", choices = years(),
selected = NULL)
})
names <- reactive({
sc3 %>% dplyr::filter(Name == input$name) %>%
select(pitch_type)
})
observe({
updateSelectizeInput(session, "type", choices = names(),
selected = NULL)
})
output$table <- DT::renderDataTable(sc_reactive(), spacing = c("s")
)
output$plot <- renderGirafe({
pitcher_map <- hit_likely(sc_reactive())
g <- pitcher_map + theme_void() + coord_fixed() +
ggtitle(paste(input$name, "Allowed Hits by Location", input$year))
girafe(ggobj = g)
})
output$plot2 <- renderGirafe({
frequency_map <- pitch_freq(sc_reactive2())
g <- frequency_map + theme_void() + coord_fixed() +
ggtitle(paste(input$name, "Pitch Location Frequency", input$year))
girafe(ggobj = g)
})
}
# Run the application
shinyApp(ui = ui, server = server)
server <- function(input, output, session) {
sc_reactive <- reactive({
sc3 %>% dplyr::filter(pitch_type == input$type)
# select(Name, game_date, events, description, p_throws, release_speed, plate_x, plate_z, launch_angle, launch_speed, woba_value)
})
sc_reactive2 <- reactive({
sc4 %>% dplyr::filter(pitch_type == input$type)
})
years <- reactive({
sc3 %>% dplyr::filter(game_year == input$year) %>%
select(Name)
})
observe({
updateSelectizeInput(session, "name", choices = years(),
selected = NULL)
})
names <- reactive({
sc3 %>% dplyr::filter(Name == input$name) %>%
select(pitch_type)
})
observe({
updateSelectizeInput(session, "type", choices = names(),
selected = NULL)
})
output$table <- DT::renderDataTable(sc_reactive(), spacing = "s"
)
output$plot <- renderGirafe({
pitcher_map <- hit_likely(sc_reactive())
g <- pitcher_map + theme_void() + coord_fixed() +
ggtitle(paste(input$name, "Allowed Hits by Location", input$year))
girafe(ggobj = g)
})
output$plot2 <- renderGirafe({
frequency_map <- pitch_freq(sc_reactive2())
g <- frequency_map + theme_void() + coord_fixed() +
ggtitle(paste(input$name, "Pitch Location Frequency", input$year))
girafe(ggobj = g)
})
}
# Run the application
shinyApp(ui = ui, server = server)
server <- function(input, output, session) {
sc_reactive <- reactive({
sc3 %>% dplyr::filter(pitch_type == input$type)
# select(Name, game_date, events, description, p_throws, release_speed, plate_x, plate_z, launch_angle, launch_speed, woba_value)
})
sc_reactive2 <- reactive({
sc4 %>% dplyr::filter(pitch_type == input$type)
})
years <- reactive({
sc3 %>% dplyr::filter(game_year == input$year) %>%
select(Name)
})
observe({
updateSelectizeInput(session, "name", choices = years(),
selected = NULL)
})
names <- reactive({
sc3 %>% dplyr::filter(Name == input$name) %>%
select(pitch_type)
})
observe({
updateSelectizeInput(session, "type", choices = names(),
selected = NULL)
})
output$table <- DT::renderDataTable(
sc_reactive()
)
output$plot <- renderGirafe({
pitcher_map <- hit_likely(sc_reactive())
g <- pitcher_map + theme_void() + coord_fixed() +
ggtitle(paste(input$name, "Allowed Hits by Location", input$year))
girafe(ggobj = g)
})
output$plot2 <- renderGirafe({
frequency_map <- pitch_freq(sc_reactive2())
g <- frequency_map + theme_void() + coord_fixed() +
ggtitle(paste(input$name, "Pitch Location Frequency", input$year))
girafe(ggobj = g)
})
}
# Run the application
shinyApp(ui = ui, server = server)
